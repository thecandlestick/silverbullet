// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// This module ports:
// - https://github.com/nodejs/node/blob/master/src/connection_wrap.cc
// - https://github.com/nodejs/node/blob/master/src/connection_wrap.h
import { LibuvStreamWrap } from "./stream_wrap.ts";
export class ConnectionWrap extends LibuvStreamWrap {
    /** Optional connection callback. */ onconnection = null;
    /**
   * Creates a new ConnectionWrap class instance.
   * @param provider Provider type.
   * @param object Optional stream object.
   */ constructor(provider, object){
        super(provider, object);
    }
    /**
   * @param req A connect request.
   * @param status An error status code.
   */ afterConnect(req, status) {
        const isSuccessStatus = !status;
        const readable = isSuccessStatus;
        const writable = isSuccessStatus;
        try {
            req.oncomplete(status, this, req, readable, writable);
        } catch  {
        // swallow callback errors.
        }
        return;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE3Ny4wL25vZGUvaW50ZXJuYWxfYmluZGluZy9jb25uZWN0aW9uX3dyYXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMyB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBUaGlzIG1vZHVsZSBwb3J0czpcbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL3NyYy9jb25uZWN0aW9uX3dyYXAuY2Ncbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL3NyYy9jb25uZWN0aW9uX3dyYXAuaFxuXG5pbXBvcnQgeyBMaWJ1dlN0cmVhbVdyYXAgfSBmcm9tIFwiLi9zdHJlYW1fd3JhcC50c1wiO1xuaW1wb3J0IHsgQXN5bmNXcmFwLCBwcm92aWRlclR5cGUgfSBmcm9tIFwiLi9hc3luY193cmFwLnRzXCI7XG5pbXBvcnQgdHlwZSB7IENsb3NlciwgUmVhZGVyLCBXcml0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMuZC50c1wiO1xuXG50eXBlIFJlZiA9IHsgcmVmKCk6IHZvaWQ7IHVucmVmKCk6IHZvaWQgfTtcblxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25XcmFwIGV4dGVuZHMgTGlidXZTdHJlYW1XcmFwIHtcbiAgLyoqIE9wdGlvbmFsIGNvbm5lY3Rpb24gY2FsbGJhY2suICovXG4gIG9uY29ubmVjdGlvbjogKChzdGF0dXM6IG51bWJlciwgaGFuZGxlPzogQ29ubmVjdGlvbldyYXApID0+IHZvaWQpIHwgbnVsbCA9XG4gICAgbnVsbDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBDb25uZWN0aW9uV3JhcCBjbGFzcyBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHByb3ZpZGVyIFByb3ZpZGVyIHR5cGUuXG4gICAqIEBwYXJhbSBvYmplY3QgT3B0aW9uYWwgc3RyZWFtIG9iamVjdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3ZpZGVyOiBwcm92aWRlclR5cGUsXG4gICAgb2JqZWN0PzogUmVhZGVyICYgV3JpdGVyICYgQ2xvc2VyICYgUmVmLFxuICApIHtcbiAgICBzdXBlcihwcm92aWRlciwgb2JqZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gcmVxIEEgY29ubmVjdCByZXF1ZXN0LlxuICAgKiBAcGFyYW0gc3RhdHVzIEFuIGVycm9yIHN0YXR1cyBjb2RlLlxuICAgKi9cbiAgYWZ0ZXJDb25uZWN0PFxuICAgIFQgZXh0ZW5kcyBBc3luY1dyYXAgJiB7XG4gICAgICBvbmNvbXBsZXRlKFxuICAgICAgICBzdGF0dXM6IG51bWJlcixcbiAgICAgICAgaGFuZGxlOiBDb25uZWN0aW9uV3JhcCxcbiAgICAgICAgcmVxOiBULFxuICAgICAgICByZWFkYWJsZTogYm9vbGVhbixcbiAgICAgICAgd3JpdGVhYmxlOiBib29sZWFuLFxuICAgICAgKTogdm9pZDtcbiAgICB9LFxuICA+KFxuICAgIHJlcTogVCxcbiAgICBzdGF0dXM6IG51bWJlcixcbiAgKSB7XG4gICAgY29uc3QgaXNTdWNjZXNzU3RhdHVzID0gIXN0YXR1cztcbiAgICBjb25zdCByZWFkYWJsZSA9IGlzU3VjY2Vzc1N0YXR1cztcbiAgICBjb25zdCB3cml0YWJsZSA9IGlzU3VjY2Vzc1N0YXR1cztcblxuICAgIHRyeSB7XG4gICAgICByZXEub25jb21wbGV0ZShzdGF0dXMsIHRoaXMsIHJlcSwgcmVhZGFibGUsIHdyaXRhYmxlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIHN3YWxsb3cgY2FsbGJhY2sgZXJyb3JzLlxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSxzREFBc0Q7QUFDdEQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSxnRUFBZ0U7QUFDaEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSw0RUFBNEU7QUFDNUUscUVBQXFFO0FBQ3JFLHdCQUF3QjtBQUN4QixFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlEQUF5RDtBQUN6RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLDZEQUE2RDtBQUM3RCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLHdFQUF3RTtBQUN4RSw0RUFBNEU7QUFDNUUseUNBQXlDO0FBRXpDLHFCQUFxQjtBQUNyQixzRUFBc0U7QUFDdEUscUVBQXFFO0FBRXJFLFNBQVMsZUFBZSxRQUFRLG1CQUFtQjtBQU1uRCxPQUFPLE1BQU0sdUJBQXVCO0lBQ2xDLGtDQUFrQyxHQUNsQyxlQUNFLElBQUksQ0FBQztJQUVQOzs7O0dBSUMsR0FDRCxZQUNFLFFBQXNCLEVBQ3RCLE1BQXVDLENBQ3ZDO1FBQ0EsS0FBSyxDQUFDLFVBQVU7SUFDbEI7SUFFQTs7O0dBR0MsR0FDRCxhQVdFLEdBQU0sRUFDTixNQUFjLEVBQ2Q7UUFDQSxNQUFNLGtCQUFrQixDQUFDO1FBQ3pCLE1BQU0sV0FBVztRQUNqQixNQUFNLFdBQVc7UUFFakIsSUFBSTtZQUNGLElBQUksVUFBVSxDQUFDLFFBQVEsSUFBSSxFQUFFLEtBQUssVUFBVTtRQUM5QyxFQUFFLE9BQU07UUFDTiwyQkFBMkI7UUFDN0I7UUFFQTtJQUNGO0FBQ0YsQ0FBQyJ9