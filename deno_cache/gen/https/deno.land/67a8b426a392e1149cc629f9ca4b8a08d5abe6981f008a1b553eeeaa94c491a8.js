// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
//
// Adapted from Node.js. Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
import { core } from "../_core.ts";
// https://tc39.es/ecma262/#sec-object.prototype.tostring
const _toString = Object.prototype.toString;
// https://tc39.es/ecma262/#sec-bigint.prototype.valueof
const _bigIntValueOf = BigInt.prototype.valueOf;
// https://tc39.es/ecma262/#sec-boolean.prototype.valueof
const _booleanValueOf = Boolean.prototype.valueOf;
// https://tc39.es/ecma262/#sec-date.prototype.valueof
const _dateValueOf = Date.prototype.valueOf;
// https://tc39.es/ecma262/#sec-number.prototype.valueof
const _numberValueOf = Number.prototype.valueOf;
// https://tc39.es/ecma262/#sec-string.prototype.valueof
const _stringValueOf = String.prototype.valueOf;
// https://tc39.es/ecma262/#sec-symbol.prototype.valueof
const _symbolValueOf = Symbol.prototype.valueOf;
// https://tc39.es/ecma262/#sec-weakmap.prototype.has
const _weakMapHas = WeakMap.prototype.has;
// https://tc39.es/ecma262/#sec-weakset.prototype.has
const _weakSetHas = WeakSet.prototype.has;
// https://tc39.es/ecma262/#sec-get-arraybuffer.prototype.bytelength
const _getArrayBufferByteLength = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
// https://tc39.es/ecma262/#sec-get-sharedarraybuffer.prototype.bytelength
const _getSharedArrayBufferByteLength = globalThis.SharedArrayBuffer ? Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, "byteLength").get : undefined;
// https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag
const _getTypedArrayToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array).prototype, Symbol.toStringTag).get;
// https://tc39.es/ecma262/#sec-get-set.prototype.size
const _getSetSize = Object.getOwnPropertyDescriptor(Set.prototype, "size").get;
// https://tc39.es/ecma262/#sec-get-map.prototype.size
const _getMapSize = Object.getOwnPropertyDescriptor(Map.prototype, "size").get;
function isObjectLike(value) {
    return value !== null && typeof value === "object";
}
export function isAnyArrayBuffer(value) {
    return isArrayBuffer(value) || isSharedArrayBuffer(value);
}
export function isArgumentsObject(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === undefined && _toString.call(value) === "[object Arguments]";
}
export function isArrayBuffer(value) {
    try {
        _getArrayBufferByteLength.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isAsyncFunction(value) {
    return typeof value === "function" && // @ts-ignore: function is a kind of object
    value[Symbol.toStringTag] === "AsyncFunction";
}
// deno-lint-ignore ban-types
export function isBooleanObject(value) {
    if (!isObjectLike(value)) {
        return false;
    }
    try {
        _booleanValueOf.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isBoxedPrimitive(value) {
    return isBooleanObject(value) || isStringObject(value) || isNumberObject(value) || isSymbolObject(value) || isBigIntObject(value);
}
export function isDataView(value) {
    return ArrayBuffer.isView(value) && _getTypedArrayToStringTag.call(value) === undefined;
}
export function isDate(value) {
    try {
        _dateValueOf.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isGeneratorFunction(value) {
    return typeof value === "function" && // @ts-ignore: function is a kind of object
    value[Symbol.toStringTag] === "GeneratorFunction";
}
export function isGeneratorObject(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === "Generator";
}
export function isMap(value) {
    try {
        _getMapSize.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isMapIterator(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === "Map Iterator";
}
export function isModuleNamespaceObject(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === "Module";
}
export function isNativeError(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === undefined && _toString.call(value) === "[object Error]";
}
// deno-lint-ignore ban-types
export function isNumberObject(value) {
    if (!isObjectLike(value)) {
        return false;
    }
    try {
        _numberValueOf.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isBigIntObject(value) {
    if (!isObjectLike(value)) {
        return false;
    }
    try {
        _bigIntValueOf.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isPromise(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === "Promise";
}
export function isProxy(value) {
    return core.isProxy(value);
}
export function isRegExp(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === undefined && _toString.call(value) === "[object RegExp]";
}
export function isSet(value) {
    try {
        _getSetSize.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isSetIterator(value) {
    return isObjectLike(value) && value[Symbol.toStringTag] === "Set Iterator";
}
export function isSharedArrayBuffer(value) {
    // SharedArrayBuffer is not available on this runtime
    if (_getSharedArrayBufferByteLength === undefined) {
        return false;
    }
    try {
        _getSharedArrayBufferByteLength.call(value);
        return true;
    } catch  {
        return false;
    }
}
// deno-lint-ignore ban-types
export function isStringObject(value) {
    if (!isObjectLike(value)) {
        return false;
    }
    try {
        _stringValueOf.call(value);
        return true;
    } catch  {
        return false;
    }
}
// deno-lint-ignore ban-types
export function isSymbolObject(value) {
    if (!isObjectLike(value)) {
        return false;
    }
    try {
        _symbolValueOf.call(value);
        return true;
    } catch  {
        return false;
    }
}
export function isWeakMap(value) {
    try {
        // deno-lint-ignore no-explicit-any
        _weakMapHas.call(value, null);
        return true;
    } catch  {
        return false;
    }
}
export function isWeakSet(value) {
    try {
        // deno-lint-ignore no-explicit-any
        _weakSetHas.call(value, null);
        return true;
    } catch  {
        return false;
    }
}
export default {
    isAsyncFunction,
    isGeneratorFunction,
    isAnyArrayBuffer,
    isArrayBuffer,
    isArgumentsObject,
    isBoxedPrimitive,
    isDataView,
    // isExternal,
    isMap,
    isMapIterator,
    isModuleNamespaceObject,
    isNativeError,
    isPromise,
    isSet,
    isSetIterator,
    isWeakMap,
    isWeakSet,
    isRegExp,
    isDate,
    isStringObject,
    isNumberObject,
    isBooleanObject,
    isBigIntObject
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE3Ny4wL25vZGUvaW50ZXJuYWxfYmluZGluZy90eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuLy9cbi8vIEFkYXB0ZWQgZnJvbSBOb2RlLmpzLiBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHsgY29yZSB9IGZyb20gXCIuLi9fY29yZS50c1wiO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmNvbnN0IF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYmlnaW50LnByb3RvdHlwZS52YWx1ZW9mXG5jb25zdCBfYmlnSW50VmFsdWVPZiA9IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZjtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1ib29sZWFuLnByb3RvdHlwZS52YWx1ZW9mXG5jb25zdCBfYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnZhbHVlb2ZcbmNvbnN0IF9kYXRlVmFsdWVPZiA9IERhdGUucHJvdG90eXBlLnZhbHVlT2Y7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS52YWx1ZW9mXG5jb25zdCBfbnVtYmVyVmFsdWVPZiA9IE51bWJlci5wcm90b3R5cGUudmFsdWVPZjtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnZhbHVlb2ZcbmNvbnN0IF9zdHJpbmdWYWx1ZU9mID0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUudmFsdWVvZlxuY29uc3QgX3N5bWJvbFZhbHVlT2YgPSBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2Y7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuaGFzXG5jb25zdCBfd2Vha01hcEhhcyA9IFdlYWtNYXAucHJvdG90eXBlLmhhcztcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5oYXNcbmNvbnN0IF93ZWFrU2V0SGFzID0gV2Vha1NldC5wcm90b3R5cGUuaGFzO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1hcnJheWJ1ZmZlci5wcm90b3R5cGUuYnl0ZWxlbmd0aFxuY29uc3QgX2dldEFycmF5QnVmZmVyQnl0ZUxlbmd0aCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gIEFycmF5QnVmZmVyLnByb3RvdHlwZSxcbiAgXCJieXRlTGVuZ3RoXCIsXG4pIS5nZXQhO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1zaGFyZWRhcnJheWJ1ZmZlci5wcm90b3R5cGUuYnl0ZWxlbmd0aFxuY29uc3QgX2dldFNoYXJlZEFycmF5QnVmZmVyQnl0ZUxlbmd0aCA9IGdsb2JhbFRoaXMuU2hhcmVkQXJyYXlCdWZmZXJcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIFNoYXJlZEFycmF5QnVmZmVyLnByb3RvdHlwZSxcbiAgICBcImJ5dGVMZW5ndGhcIixcbiAgKSEuZ2V0IVxuICA6IHVuZGVmaW5lZDtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5jb25zdCBfZ2V0VHlwZWRBcnJheVRvU3RyaW5nVGFnID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpLnByb3RvdHlwZSxcbiAgU3ltYm9sLnRvU3RyaW5nVGFnLFxuKSEuZ2V0ITtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LnByb3RvdHlwZS5zaXplXG5jb25zdCBfZ2V0U2V0U2l6ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gIFNldC5wcm90b3R5cGUsXG4gIFwic2l6ZVwiLFxuKSEuZ2V0ITtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtbWFwLnByb3RvdHlwZS5zaXplXG5jb25zdCBfZ2V0TWFwU2l6ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gIE1hcC5wcm90b3R5cGUsXG4gIFwic2l6ZVwiLFxuKSEuZ2V0ITtcblxuZnVuY3Rpb24gaXNPYmplY3RMaWtlKFxuICB2YWx1ZTogdW5rbm93bixcbik6IHZhbHVlIGlzIFJlY29yZDxzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wsIHVua25vd24+IHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW55QXJyYXlCdWZmZXIoXG4gIHZhbHVlOiB1bmtub3duLFxuKTogdmFsdWUgaXMgQXJyYXlCdWZmZXIgfCBTaGFyZWRBcnJheUJ1ZmZlciB7XG4gIHJldHVybiBpc0FycmF5QnVmZmVyKHZhbHVlKSB8fCBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJndW1lbnRzT2JqZWN0KHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgSUFyZ3VtZW50cyB7XG4gIHJldHVybiAoXG4gICAgaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IHVuZGVmaW5lZCAmJlxuICAgIF90b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIEFycmF5QnVmZmVyIHtcbiAgdHJ5IHtcbiAgICBfZ2V0QXJyYXlCdWZmZXJCeXRlTGVuZ3RoLmNhbGwodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNGdW5jdGlvbihcbiAgdmFsdWU6IHVua25vd24sXG4pOiB2YWx1ZSBpcyAoLi4uYXJnczogdW5rbm93bltdKSA9PiBQcm9taXNlPHVua25vd24+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgIC8vIEB0cy1pZ25vcmU6IGZ1bmN0aW9uIGlzIGEga2luZCBvZiBvYmplY3RcbiAgICB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIkFzeW5jRnVuY3Rpb25cIlxuICApO1xufVxuXG4vLyBkZW5vLWxpbnQtaWdub3JlIGJhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbk9iamVjdCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIEJvb2xlYW4ge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIF9ib29sZWFuVmFsdWVPZi5jYWxsKHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JveGVkUHJpbWl0aXZlKFxuICB2YWx1ZTogdW5rbm93bixcbiAgLy8gZGVuby1saW50LWlnbm9yZSBiYW4tdHlwZXNcbik6IHZhbHVlIGlzIEJvb2xlYW4gfCBTdHJpbmcgfCBOdW1iZXIgfCBTeW1ib2wgfCBCaWdJbnQge1xuICByZXR1cm4gKFxuICAgIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N0cmluZ09iamVjdCh2YWx1ZSkgfHxcbiAgICBpc051bWJlck9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N5bWJvbE9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0JpZ0ludE9iamVjdCh2YWx1ZSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0YVZpZXcodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBEYXRhVmlldyB7XG4gIHJldHVybiAoXG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSAmJlxuICAgIF9nZXRUeXBlZEFycmF5VG9TdHJpbmdUYWcuY2FsbCh2YWx1ZSkgPT09IHVuZGVmaW5lZFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgRGF0ZSB7XG4gIHRyeSB7XG4gICAgX2RhdGVWYWx1ZU9mLmNhbGwodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzR2VuZXJhdG9yRnVuY3Rpb24oXG4gIHZhbHVlOiB1bmtub3duLFxuKTogdmFsdWUgaXMgR2VuZXJhdG9yRnVuY3Rpb24ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgLy8gQHRzLWlnbm9yZTogZnVuY3Rpb24gaXMgYSBraW5kIG9mIG9iamVjdFxuICAgIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNHZW5lcmF0b3JPYmplY3QodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBHZW5lcmF0b3Ige1xuICByZXR1cm4gKFxuICAgIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIkdlbmVyYXRvclwiXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hcCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIE1hcDx1bmtub3duLCB1bmtub3duPiB7XG4gIHRyeSB7XG4gICAgX2dldE1hcFNpemUuY2FsbCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNYXBJdGVyYXRvcihcbiAgdmFsdWU6IHVua25vd24sXG4pOiB2YWx1ZSBpcyBJdGVyYWJsZUl0ZXJhdG9yPFt1bmtub3duLCB1bmtub3duXT4ge1xuICByZXR1cm4gKFxuICAgIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIk1hcCBJdGVyYXRvclwiXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01vZHVsZU5hbWVzcGFjZU9iamVjdChcbiAgdmFsdWU6IHVua25vd24sXG4pOiB2YWx1ZSBpcyBSZWNvcmQ8c3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCB1bmtub3duPiB7XG4gIHJldHVybiAoXG4gICAgaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiTW9kdWxlXCJcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmF0aXZlRXJyb3IodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBFcnJvciB7XG4gIHJldHVybiAoXG4gICAgaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IHVuZGVmaW5lZCAmJlxuICAgIF90b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IEVycm9yXVwiXG4gICk7XG59XG5cbi8vIGRlbm8tbGludC1pZ25vcmUgYmFuLXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBOdW1iZXIge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIF9udW1iZXJWYWx1ZU9mLmNhbGwodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmlnSW50T2JqZWN0KHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgQmlnSW50IHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBfYmlnSW50VmFsdWVPZi5jYWxsKHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBQcm9taXNlPHVua25vd24+IHtcbiAgcmV0dXJuIChcbiAgICBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJQcm9taXNlXCJcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJveHkoXG4gIHZhbHVlOiB1bmtub3duLFxuKTogdmFsdWUgaXMgUmVjb3JkPHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgdW5rbm93bj4ge1xuICByZXR1cm4gY29yZS5pc1Byb3h5KHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgUmVnRXhwIHtcbiAgcmV0dXJuIChcbiAgICBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgX3RvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgUmVnRXhwXVwiXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NldCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFNldDx1bmtub3duPiB7XG4gIHRyeSB7XG4gICAgX2dldFNldFNpemUuY2FsbCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTZXRJdGVyYXRvcihcbiAgdmFsdWU6IHVua25vd24sXG4pOiB2YWx1ZSBpcyBJdGVyYWJsZUl0ZXJhdG9yPHVua25vd24+IHtcbiAgcmV0dXJuIChcbiAgICBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJTZXQgSXRlcmF0b3JcIlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlcihcbiAgdmFsdWU6IHVua25vd24sXG4pOiB2YWx1ZSBpcyBTaGFyZWRBcnJheUJ1ZmZlciB7XG4gIC8vIFNoYXJlZEFycmF5QnVmZmVyIGlzIG5vdCBhdmFpbGFibGUgb24gdGhpcyBydW50aW1lXG4gIGlmIChfZ2V0U2hhcmVkQXJyYXlCdWZmZXJCeXRlTGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIF9nZXRTaGFyZWRBcnJheUJ1ZmZlckJ5dGVMZW5ndGguY2FsbCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBkZW5vLWxpbnQtaWdub3JlIGJhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nT2JqZWN0KHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgU3RyaW5nIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBfc3RyaW5nVmFsdWVPZi5jYWxsKHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIGRlbm8tbGludC1pZ25vcmUgYmFuLXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gaXNTeW1ib2xPYmplY3QodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBTeW1ib2wge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIF9zeW1ib2xWYWx1ZU9mLmNhbGwodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV2Vha01hcChcbiAgdmFsdWU6IHVua25vd24sXG4pOiB2YWx1ZSBpcyBXZWFrTWFwPFJlY29yZDxzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wsIHVua25vd24+LCB1bmtub3duPiB7XG4gIHRyeSB7XG4gICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICBfd2Vha01hcEhhcy5jYWxsKHZhbHVlLCBudWxsIGFzIGFueSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNXZWFrU2V0KFxuICB2YWx1ZTogdW5rbm93bixcbik6IHZhbHVlIGlzIFdlYWtTZXQ8UmVjb3JkPHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgdW5rbm93bj4+IHtcbiAgdHJ5IHtcbiAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgIF93ZWFrU2V0SGFzLmNhbGwodmFsdWUsIG51bGwgYXMgYW55KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBc3luY0Z1bmN0aW9uLFxuICBpc0dlbmVyYXRvckZ1bmN0aW9uLFxuICBpc0FueUFycmF5QnVmZmVyLFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0FyZ3VtZW50c09iamVjdCxcbiAgaXNCb3hlZFByaW1pdGl2ZSxcbiAgaXNEYXRhVmlldyxcbiAgLy8gaXNFeHRlcm5hbCxcbiAgaXNNYXAsXG4gIGlzTWFwSXRlcmF0b3IsXG4gIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0LFxuICBpc05hdGl2ZUVycm9yLFxuICBpc1Byb21pc2UsXG4gIGlzU2V0LFxuICBpc1NldEl0ZXJhdG9yLFxuICBpc1dlYWtNYXAsXG4gIGlzV2Vha1NldCxcbiAgaXNSZWdFeHAsXG4gIGlzRGF0ZSxcbiAgaXNTdHJpbmdPYmplY3QsXG4gIGlzTnVtYmVyT2JqZWN0LFxuICBpc0Jvb2xlYW5PYmplY3QsXG4gIGlzQmlnSW50T2JqZWN0LFxufTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsRUFBRTtBQUNGLDRFQUE0RTtBQUM1RSxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLGdFQUFnRTtBQUNoRSxzRUFBc0U7QUFDdEUsc0VBQXNFO0FBQ3RFLDRFQUE0RTtBQUM1RSxxRUFBcUU7QUFDckUsd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRiww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