/* esm.sh - esbuild bundle(lib0@0.2.74/decoding) deno production */
var H=String.fromCharCode,$=String.fromCodePoint;var W=typeof TextEncoder<"u"?new TextEncoder:null;var p=typeof TextDecoder>"u"?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});p&&p.decode(new Uint8Array).length===1&&(p=null);var c=Math.floor;var z=Number.isNaN;var f=t=>t!==0?t<0:1/t<0;var x=Number.MAX_SAFE_INTEGER,J=Number.MIN_SAFE_INTEGER,K=1<<31;var Q=Number.isInteger||(t=>typeof t=="number"&&isFinite(t)&&c(t)===t),Y=Number.isNaN,D=Number.parseInt;var b=(t,r,o)=>new Uint8Array(t,r,o);var l=t=>new Error(t);var C=l("Unexpected end of array"),S=l("Integer out of Range"),i=class{constructor(r){this.arr=r,this.pos=0}},G=t=>new i(t),_=t=>t.pos!==t.arr.length,ot=(t,r=t.pos)=>{let o=G(t.arr);return o.pos=r,o},M=(t,r)=>{let o=b(t.arr.buffer,t.pos+t.arr.byteOffset,r);return t.pos+=r,o},F=t=>M(t,e(t)),st=t=>M(t,t.arr.length-t.pos),et=t=>t.pos++,m=t=>t.arr[t.pos++],nt=t=>{let r=t.arr[t.pos]+(t.arr[t.pos+1]<<8);return t.pos+=2,r},it=t=>{let r=t.arr[t.pos]+(t.arr[t.pos+1]<<8)+(t.arr[t.pos+2]<<16)+(t.arr[t.pos+3]<<24)>>>0;return t.pos+=4,r},at=t=>{let r=t.arr[t.pos+3]+(t.arr[t.pos+2]<<8)+(t.arr[t.pos+1]<<16)+(t.arr[t.pos]<<24)>>>0;return t.pos+=4,r},pt=t=>t.arr[t.pos],ct=t=>t.arr[t.pos]+(t.arr[t.pos+1]<<8),ht=t=>t.arr[t.pos]+(t.arr[t.pos+1]<<8)+(t.arr[t.pos+2]<<16)+(t.arr[t.pos+3]<<24)>>>0,e=t=>{let r=0,o=1,s=t.arr.length;for(;t.pos<s;){let n=t.arr[t.pos++];if(r=r+(n&127)*o,o*=128,n<128)return r;if(r>x)throw S}throw C},a=t=>{let r=t.arr[t.pos++],o=r&63,s=64,n=(r&64)>0?-1:1;if(!(r&128))return n*o;let L=t.arr.length;for(;t.pos<L;){if(r=t.arr[t.pos++],o=o+(r&127)*s,s*=128,r<128)return n*o;if(o>x)throw S}throw C},ut=t=>{let r=t.pos,o=e(t);return t.pos=r,o},ft=t=>{let r=t.pos,o=a(t);return t.pos=r,o},O=t=>{let r=e(t);if(r===0)return"";{let o=String.fromCodePoint(m(t));if(--r<100)for(;r--;)o+=String.fromCodePoint(m(t));else for(;r>0;){let s=r<1e4?r:1e4,n=t.arr.subarray(t.pos,t.pos+s);t.pos+=s,o+=String.fromCodePoint.apply(null,n),r-=s}return decodeURIComponent(escape(o))}},X=t=>p.decode(F(t)),h=p?X:O,xt=t=>{let r=t.pos,o=h(t);return t.pos=r,o},u=(t,r)=>{let o=new DataView(t.arr.buffer,t.arr.byteOffset+t.pos,r);return t.pos+=r,o},Z=t=>u(t,4).getFloat32(0,!1),d=t=>u(t,8).getFloat64(0,!1),j=t=>u(t,8).getBigInt64(0,!1),lt=t=>u(t,8).getBigUint64(0,!1),q=[t=>{},t=>null,a,Z,d,j,t=>!1,t=>!0,h,t=>{let r=e(t),o={};for(let s=0;s<r;s++){let n=h(t);o[n]=A(t)}return o},t=>{let r=e(t),o=[];for(let s=0;s<r;s++)o.push(A(t));return o},F],A=t=>q[127-m(t)](t),U=class extends i{constructor(r,o){super(r),this.reader=o,this.s=null,this.count=0}read(){return this.count===0&&(this.s=this.reader(this),_(this)?this.count=e(this)+1:this.count=-1),this.count--,this.s}},N=class extends i{constructor(r,o){super(r),this.s=o}read(){return this.s+=a(this),this.s}},B=class extends i{constructor(r,o){super(r),this.s=o,this.count=0}read(){return this.count===0&&(this.s+=a(this),_(this)?this.count=e(this)+1:this.count=-1),this.count--,this.s}},g=class extends i{constructor(r){super(r),this.s=0,this.count=0}read(){if(this.count===0){this.s=a(this);let r=f(this.s);this.count=1,r&&(this.s=-this.s,this.count=e(this)+2)}return this.count--,this.s}},I=class extends i{constructor(r){super(r),this.s=0,this.count=0}read(){if(this.count===0){this.s=a(this);let r=f(this.s);this.count=1,r&&(this.s=-this.s,this.count=e(this)+2)}return this.count--,this.s++}},T=class extends i{constructor(r){super(r),this.s=0,this.count=0,this.diff=0}read(){if(this.count===0){let r=a(this),o=r&1;this.diff=c(r/2),this.count=1,o&&(this.count=e(this)+2)}return this.s+=this.diff,this.count--,this.s}},E=class{constructor(r){this.decoder=new g(r),this.str=h(this.decoder),this.spos=0}read(){let r=this.spos+this.decoder.read(),o=this.str.slice(this.spos,r);return this.spos=r,o}};export{i as Decoder,I as IncUintOptRleDecoder,N as IntDiffDecoder,T as IntDiffOptRleDecoder,U as RleDecoder,B as RleIntDiffDecoder,E as StringDecoder,g as UintOptRleDecoder,X as _readVarStringNative,O as _readVarStringPolyfill,ot as clone,G as createDecoder,_ as hasContent,ct as peekUint16,ht as peekUint32,pt as peekUint8,ft as peekVarInt,xt as peekVarString,ut as peekVarUint,A as readAny,j as readBigInt64,lt as readBigUint64,Z as readFloat32,d as readFloat64,u as readFromDataView,st as readTailAsUint8Array,nt as readUint16,it as readUint32,at as readUint32BigEndian,m as readUint8,M as readUint8Array,a as readVarInt,h as readVarString,e as readVarUint,F as readVarUint8Array,et as skip8};
//# sourceMappingURL=decoding.js.map