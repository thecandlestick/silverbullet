import { base64Decode, base64EncodedDataUrl } from "./base64.ts";
import { mime } from "../deps.ts";
export class AssetBundle {
    bundle;
    constructor(bundle = {}){
        this.bundle = bundle;
    }
    has(path) {
        return path in this.bundle;
    }
    listFiles() {
        return Object.keys(this.bundle);
    }
    readFileSync(path) {
        const content = this.bundle[path];
        if (!content) {
            throw new Error(`No such file ${path}`);
        }
        const data = content.split(",", 2)[1];
        return base64Decode(data);
    }
    readFileAsDataUrl(path) {
        const content = this.bundle[path];
        if (!content) {
            throw new Error(`No such file ${path}`);
        }
        return content;
    }
    readTextFileSync(path) {
        return new TextDecoder().decode(this.readFileSync(path));
    }
    getMimeType(path) {
        const content = this.bundle[path];
        if (!content) {
            throw new Error(`No such file ${path}`);
        }
        return content.split(";")[0].split(":")[1];
    }
    writeFileSync(path, data) {
        // Replace \ with / for windows
        path = path.replaceAll("\\", "/");
        const mimeType = mime.getType(path) || "application/octet-stream";
        this.bundle[path] = base64EncodedDataUrl(mimeType, data);
    }
    writeTextFileSync(path, s) {
        this.writeFileSync(path, new TextEncoder().encode(s));
    }
    toJSON() {
        return this.bundle;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9qYWNrL215c2lsdmVyYnVsbGV0L3BsdWdvcy9hc3NldF9idW5kbGUvYnVuZGxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJhc2U2NERlY29kZSwgYmFzZTY0RW5jb2RlZERhdGFVcmwgfSBmcm9tIFwiLi9iYXNlNjQudHNcIjtcbmltcG9ydCB7IG1pbWUgfSBmcm9tIFwiLi4vZGVwcy50c1wiO1xuXG50eXBlIERhdGFVcmwgPSBzdHJpbmc7XG5cbi8vIE1hcHBpbmcgZnJvbSBwYXRoIC0+IGBkYXRhOm1pbWV0eXBlO2Jhc2U2NCxiYXNlNjQtZW5jb2RlZC1kYXRhYCBzdHJpbmdzXG5leHBvcnQgdHlwZSBBc3NldEpzb24gPSBSZWNvcmQ8c3RyaW5nLCBEYXRhVXJsPjtcblxuZXhwb3J0IGNsYXNzIEFzc2V0QnVuZGxlIHtcbiAgcmVhZG9ubHkgYnVuZGxlOiBBc3NldEpzb247XG5cbiAgY29uc3RydWN0b3IoYnVuZGxlOiBBc3NldEpzb24gPSB7fSkge1xuICAgIHRoaXMuYnVuZGxlID0gYnVuZGxlO1xuICB9XG5cbiAgaGFzKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwYXRoIGluIHRoaXMuYnVuZGxlO1xuICB9XG5cbiAgbGlzdEZpbGVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5idW5kbGUpO1xuICB9XG5cbiAgcmVhZEZpbGVTeW5jKFxuICAgIHBhdGg6IHN0cmluZyxcbiAgKTogVWludDhBcnJheSB7XG4gICAgY29uc3QgY29udGVudCA9IHRoaXMuYnVuZGxlW3BhdGhdO1xuICAgIGlmICghY29udGVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIGZpbGUgJHtwYXRofWApO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gY29udGVudC5zcGxpdChcIixcIiwgMilbMV07XG4gICAgcmV0dXJuIGJhc2U2NERlY29kZShkYXRhKTtcbiAgfVxuXG4gIHJlYWRGaWxlQXNEYXRhVXJsKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY29udGVudCA9IHRoaXMuYnVuZGxlW3BhdGhdO1xuICAgIGlmICghY29udGVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIGZpbGUgJHtwYXRofWApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIHJlYWRUZXh0RmlsZVN5bmMoXG4gICAgcGF0aDogc3RyaW5nLFxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUodGhpcy5yZWFkRmlsZVN5bmMocGF0aCkpO1xuICB9XG5cbiAgZ2V0TWltZVR5cGUoXG4gICAgcGF0aDogc3RyaW5nLFxuICApOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmJ1bmRsZVtwYXRoXTtcbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3VjaCBmaWxlICR7cGF0aH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnQuc3BsaXQoXCI7XCIpWzBdLnNwbGl0KFwiOlwiKVsxXTtcbiAgfVxuXG4gIHdyaXRlRmlsZVN5bmMocGF0aDogc3RyaW5nLCBkYXRhOiBVaW50OEFycmF5KSB7XG4gICAgLy8gUmVwbGFjZSBcXCB3aXRoIC8gZm9yIHdpbmRvd3NcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlQWxsKFwiXFxcXFwiLCBcIi9cIik7XG4gICAgY29uc3QgbWltZVR5cGUgPSBtaW1lLmdldFR5cGUocGF0aCkgfHwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIjtcbiAgICB0aGlzLmJ1bmRsZVtwYXRoXSA9IGJhc2U2NEVuY29kZWREYXRhVXJsKG1pbWVUeXBlLCBkYXRhKTtcbiAgfVxuXG4gIHdyaXRlVGV4dEZpbGVTeW5jKHBhdGg6IHN0cmluZywgczogc3RyaW5nKSB7XG4gICAgdGhpcy53cml0ZUZpbGVTeW5jKHBhdGgsIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzKSk7XG4gIH1cblxuICB0b0pTT04oKTogQXNzZXRKc29uIHtcbiAgICByZXR1cm4gdGhpcy5idW5kbGU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFlBQVksRUFBRSxvQkFBb0IsUUFBUSxjQUFjO0FBQ2pFLFNBQVMsSUFBSSxRQUFRLGFBQWE7QUFPbEMsT0FBTyxNQUFNO0lBQ0YsT0FBa0I7SUFFM0IsWUFBWSxTQUFvQixDQUFDLENBQUMsQ0FBRTtRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHO0lBQ2hCO0lBRUEsSUFBSSxJQUFZLEVBQVc7UUFDekIsT0FBTyxRQUFRLElBQUksQ0FBQyxNQUFNO0lBQzVCO0lBRUEsWUFBc0I7UUFDcEIsT0FBTyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtJQUNoQztJQUVBLGFBQ0UsSUFBWSxFQUNBO1FBQ1osTUFBTSxVQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSztRQUNqQyxJQUFJLENBQUMsU0FBUztZQUNaLE1BQU0sSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQzFDLENBQUM7UUFDRCxNQUFNLE9BQU8sUUFBUSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUNyQyxPQUFPLGFBQWE7SUFDdEI7SUFFQSxrQkFBa0IsSUFBWSxFQUFVO1FBQ3RDLE1BQU0sVUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDakMsSUFBSSxDQUFDLFNBQVM7WUFDWixNQUFNLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUMxQyxDQUFDO1FBQ0QsT0FBTztJQUNUO0lBRUEsaUJBQ0UsSUFBWSxFQUNKO1FBQ1IsT0FBTyxJQUFJLGNBQWMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDcEQ7SUFFQSxZQUNFLElBQVksRUFDSjtRQUNSLE1BQU0sVUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDakMsSUFBSSxDQUFDLFNBQVM7WUFDWixNQUFNLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUMxQyxDQUFDO1FBQ0QsT0FBTyxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUM1QztJQUVBLGNBQWMsSUFBWSxFQUFFLElBQWdCLEVBQUU7UUFDNUMsK0JBQStCO1FBQy9CLE9BQU8sS0FBSyxVQUFVLENBQUMsTUFBTTtRQUM3QixNQUFNLFdBQVcsS0FBSyxPQUFPLENBQUMsU0FBUztRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxxQkFBcUIsVUFBVTtJQUNyRDtJQUVBLGtCQUFrQixJQUFZLEVBQUUsQ0FBUyxFQUFFO1FBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLGNBQWMsTUFBTSxDQUFDO0lBQ3BEO0lBRUEsU0FBb0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTTtJQUNwQjtBQUNGLENBQUMifQ==